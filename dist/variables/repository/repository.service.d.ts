export declare const repositoryService = "\nimport { Injectable, HttpStatus } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { paginate, PaginationArgs } from 'nestjs-prisma-pagination';\n\n@Injectable()\nexport class RepositoryService<CreateType, UpdateType> {\n  model = '';\n  includes: string[] = [];\n  search: string[] = [];\n\n  constructor(protected readonly prisma: PrismaService) {}\n\n  async create(createRepositoryDto: CreateType) {\n    return await this.prisma[this.model].create({\n      data: createRepositoryDto,\n    });\n  }\n\n  async createMany(createRepositoryDtos: CreateType[]) {\n    return await this.prisma[this.model].createMany({\n      data: createRepositoryDtos,\n    });\n  }\n\n  get includes_() {\n    const include: Record<string, boolean | any> = {};\n    for (const attr of this.includes) {\n      if (attr.includes('.')) {\n        const [key, value, ex] = attr.split('.');\n        if (!ex) {\n          include[key] = {\n            include: {\n              ...(include[key] ? include[key].include : {}),\n              [value]: true,\n            },\n          };\n        }\n        continue;\n      }\n      include[attr] = true;\n    }\n    return include;\n  }\n\n  async findAll(args?: PaginationArgs) {\n    const query = paginate(args, {\n      includes: this.includes_,\n      search: this.search,\n    });\n\n    const result = await this.prisma[this.model].findMany(query);\n    const count = await this.prisma[this.model].count({\n      where: { enabled: true },\n    });\n    return { statusCode: HttpStatus.OK, data: { values: result, count } };\n  }\n\n  async findOne(id: string) {\n    const query: any = { where: { id, enabled: true } };\n    if (this.includes.length > 0) query.include = this.includes_;\n    return await this.prisma[this.model].findFirst(query);\n  }\n\n  async update(id: string, updateRepositoryDto: UpdateType) {\n    return await this.prisma[this.model].update({\n      where: { id },\n      data: updateRepositoryDto,\n    });\n  }\n\n  async remove(id: string) {\n    return await this.prisma[this.model].delete({ where: { id } });\n  }\n\n  async softRemove(id: string) {\n    return await this.update(id, { enabled: false } as any);\n  }\n\n  async removeAll() {\n    return await this.prisma[this.model].deleteMany();\n  }\n\n  async softRemoveAll() {\n    return await this.prisma[this.model].updateMany({\n      data: { enabled: false },\n    });\n  }\n\n  async removeMultiple(ids: string[]) {\n    return await this.prisma[this.model].deleteMany({\n      where: { id: { in: ids } },\n    });\n  }\n\n  async softRemoveMultiple(ids: string[]) {\n    return await this.prisma[this.model].updateMany({\n      where: { id: { in: ids } },\n      data: { enabled: false },\n    });\n  }\n}\n";
