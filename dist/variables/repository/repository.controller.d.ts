export declare const repositoryController = "\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport { RepositoryService } from './repository.service';\nimport { ApiBody } from '@nestjs/swagger';\nimport { PaginationArgs } from 'nestjs-prisma-pagination';\n\n@Controller('repository')\nexport class RepositoryController<CreateType, UpdateType> {\n  constructor(\n    private readonly repositoryService: RepositoryService<\n      CreateType,\n      UpdateType\n    >,\n  ) {}\n\n  @Post()\n  async create(@Body() createRepositoryDto: CreateType) {\n    const result = await this.repositoryService.create(createRepositoryDto);\n    return result;\n  }\n\n  @Post('multiple')\n  async createMany(@Body() createRepositoryDtos: CreateType[]) {\n    const result = await this.repositoryService.createMany(\n      createRepositoryDtos,\n    );\n    return result;\n  }\n\n  @Get()\n  async findAll(@Query() args?: PaginationArgs) {\n    return await this.repositoryService.findAll(args);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    const data = await this.repositoryService.findOne(id);\n    console.log(data);\n    if (!data) return new NotFoundException();\n    return data;\n  }\n\n  @Put(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateRepositoryDto: UpdateType,\n  ) {\n    const result = this.repositoryService.update(id, updateRepositoryDto);\n    return result;\n  }\n\n  @Delete('multiple/force')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        ids: { type: 'array', items: { type: 'string' } },\n      },\n    },\n  })\n  async removeMultiple(@Body('ids') ids: string[]) {\n    const result = await this.repositoryService.removeMultiple(ids);\n    return result;\n  }\n\n  @Patch('multiple')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        ids: { type: 'array', items: { type: 'string' } },\n      },\n    },\n  })\n  async softRemoveMultiple(@Body('ids') ids: string[]) {\n    console.log('[ids]', ids);\n    const result = await this.repositoryService.softRemoveMultiple(ids);\n    return result;\n  }\n\n  @Delete('all/force')\n  async removeAll() {\n    const result = await this.repositoryService.removeAll();\n    return result;\n  }\n\n  @Delete('all')\n  async softRemoveAll() {\n    const result = await this.repositoryService.softRemoveAll();\n    return result;\n  }\n\n  @Delete(':id/force')\n  async remove(@Param('id') id: string) {\n    const result = await this.repositoryService.remove(id);\n    return result;\n  }\n\n  @Delete(':id')\n  async softRemove(@Param('id') id: string) {\n    const result = await this.repositoryService.softRemove(id);\n    console.log(result);\n    return result;\n  }\n}\n";
